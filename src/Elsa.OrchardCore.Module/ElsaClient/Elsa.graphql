schema {
  query: Query
  mutation: Mutation
}

type Query {
  activityDescriptor(typeName: ID): ActivityDescriptor
  activityDescriptors: [ActivityDescriptor!]!
  workflowDefinition(definitionId: ID id: ID version: VersionOptionsInput): WorkflowDefinitionVersion!
  workflowDefinitions(version: VersionOptionsInput): [WorkflowDefinitionVersion!]!
  workflowInstance(id: ID): WorkflowInstance!
  workflowInstances(definitionId: ID status: WorkflowStatus): [WorkflowInstance!]!
}

type Mutation {
  deleteWorkflowDefinition(id: ID): Int!
  saveWorkflowDefinition(id: ID saveAction: WorkflowSaveAction! workflowInput: WorkflowInput!): WorkflowDefinitionVersion!
}

scalar Variable

type ActivityDescriptor {
  category: String!
  description: String
  displayName: String!
  icon: String
  outcomes: [String!]!
  properties: [ActivityPropertyDescriptor!]!
  runtimeDescription: String!
  type: String!
}

type ActivityPropertyDescriptor {
  hint: String
  label: String
  name: String!
  options: JObjectType
  type: String!
}

input WorkflowInput {
  activities: [ActivityDefinitionInput!]
  connections: [ConnectionDefinitionInput!]
  deleteCompletedInstances: Boolean
  description: String
  isDisabled: Boolean
  isSingleton: Boolean
  name: String
  persistenceBehavior: WorkflowPersistenceBehavior
  variables: String
}

type ActivityDefinition {
  description: String
  displayName: String
  id: String!
  left: Int
  name: String
  persistWorkflow: Boolean!
  state: Variables
  top: Int
  type: String!
}

input ActivityDefinitionInput {
  description: String
  displayName: String
  id: String!
  left: Int
  name: String
  state: String
  top: Int
  type: String!
}

type ConnectionDefinition {
  outcome: String
  sourceActivityId: String
  targetActivityId: String
}

type WorkflowDefinitionVersion {
  activities: [ActivityDefinition]!
  connections: [ConnectionDefinition]!
  definitionId: String
  deleteCompletedInstances: Boolean!
  description: String
  id: String
  isDisabled: Boolean!
  isLatest: Boolean!
  isPublished: Boolean!
  isSingleton: Boolean!
  name: String
  persistenceBehavior: WorkflowPersistenceBehavior!
  variables: Variables
  version: Int!
}

input VersionOptionsInput {
  allVersions: Boolean
  draft: Boolean
  latest: Boolean
  latestOrPublished: Boolean
  published: Boolean
  version: Int
}

"Represents an instant on the global timeline."
scalar Instant

"The multiplier path scalar represents a valid GraphQL multiplier path string."
scalar MultiplierPath

scalar JObjectType

scalar Variables

enum WorkflowStatus {
  IDLE
  RUNNING
  COMPLETED
  SUSPENDED
  FAULTED
  CANCELLED
}

type WorkflowInstance {
  activities: [ActivityInstance!]!
  blockingActivities: [BlockingActivity]!
  correlationId: String
  createdAt: Instant!
  definitionId: String
  executionLog: [ExecutionLogEntry!]!
  fault: WorkflowFault
  id: String
  output: Variable
  scheduledActivities: [ScheduledActivity]!
  status: WorkflowStatus!
  variables: [KeyValuePairOfStringAndVariable]!
  version: Int!
}

enum WorkflowSaveAction {
  DRAFT
  PUBLISH
}

enum WorkflowPersistenceBehavior {
  SUSPENDED
  WORKFLOWEXECUTED
  ACTIVITYEXECUTED
}

input ConnectionDefinitionInput {
  outcome: String
  sourceActivityId: String
  targetActivityId: String
}

type KeyValuePairOfStringAndVariable {
  key: String!
  value: Variable!
}

type ActivityInstance {
  id: String
  output: Variable
  state: [KeyValuePairOfStringAndVariable!]
  type: String
}

type BlockingActivity {
  activityId: String
  activityType: String
  tag: String
}

type ExecutionLogEntry {
  activityId: String!
  timestamp: Instant!
}

type WorkflowFault {
  faultedActivityId: String
  message: String
}

type ScheduledActivity {
  activityId: String
  input: Variable
}

"The cost directives is used to express the complexity of a field."
directive @cost("Defines the complexity of the field." complexity: Int! = 1 "Defines field arguments that act as complexity multipliers." multipliers: [MultiplierPath!]) on FIELD_DEFINITION